#!/bin/bash
#
# Start panelupdate, the forked processes feeding it, and lemonbar

cleanup() {
  # The \r hides the ^C that appears
  echo -e '\rPerforming cleanup...'

  rm $PANEL_PID_LOC
  bspc config top_padding 0

  # Avoid executing cleanup() again when this process kills itself
  trap - TERM
  # Kill this process and all its child processes
  kill 0
}

# Get the time
myclock() {
  date "+%H:%M"
}

# Get the date
mydate() {
  date "+%a %d"
}

# Get the load average
loadavg() {
  cat /proc/loadavg | cut -d' ' -f -3
}

# Repeatedly invoke the given command with the given frequency
wraprepeat() {
  # Number of seconds to wait between invocations
  interval=$1; shift
  # Format string to use
  format=$1; shift

  # The command to actually execute
  docmd=$@

  last=''

  while true; do
    result=$($docmd)

    # Only send output if the output changed from the last invocation
    if [ "$last" != "$result" ]; then
      printf "$format" "$result"
      last=$result
    fi

    sleep $interval
  done
}

# Error immediately when something bad happens; disallow undefined variables
set -euo pipefail

# Do cleanup before exiting; also exit as soon as an error occurs
# This will let us exit when the X session closes without needing to be killed
trap cleanup INT TERM QUIT EXIT ERR PIPE

. panelopts

# Initialize the fifo, removing it first if it already exists
[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

# Write the pid somewhere so other processes can kill this process
echo $$ > $PANEL_PID_LOC

# Feed various pieces of information into panelupdate
wraprepeat 3 'C%s\n' myclock > $PANEL_FIFO &
wraprepeat 4 'BS%s\n' "cat $BAT_SYS_PATH/status" > $PANEL_FIFO &
wraprepeat 5 'L%s\n' loadavg > $PANEL_FIFO &
wraprepeat 9 'BP%s\n' "cat $BAT_SYS_PATH/capacity" > $PANEL_FIFO &
wraprepeat 1800 'D%s\n' mydate > $PANEL_FIFO &

xtitle -sf 'T%s' > $PANEL_FIFO &
bspc subscribe > $PANEL_FIFO &

# Make way for the panel!
bspc config top_padding $PANEL_HEIGHT

./panelout < $PANEL_FIFO | lemonbar -p -g "$PANEL_GEOMETRY" -f "$PANEL_FONT" |\
  sh &

wait
