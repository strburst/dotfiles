#!/usr/bin/bash
#
# Start panelupdate, the forked processes feeding it, and lemonbar

cleanup() {
  # The \r hides the ^C that appears
  echo -e '\rPerforming cleanup...'

  rm $PANEL_PID_LOC
  bspc config top_padding 0

  # Avoid executing cleanup() again when this process kills itself
  trap - TERM
  # Kill this process and all its child processes
  kill 0
}

# Get the battery percentage from acpi
battery() {
  # If an argument is given, cut it instead
  echo ${1:-$(acpi -b)} | cut -d, -f 2 | tr --delete --complement '[:digit:]'
}

# Get the battery percentage and charging status at the same time
batterypretty() {
  rawinfo=$(acpi -b)
  percent=$(battery "$rawinfo")

  case "$(echo $rawinfo | cut -d' ' -f 3)" in
    'Discharging,') state='-' ;;
    'Charging,') state='+' ;;
    'Unknown,') state='?' ;;
    'Full,') state='' ;;
  esac

  echo $state$percent%
}

# Get the date and time
clock() {
  date "+%a %H:%M"
}

# Get the name of the currently focused desktop
curdesktop() {
  bspc query -D -d focused
}

# Get the name of the currently focused window
curwindow() {
  xdotool getwindowfocus getwindowname
}

# Repeatedly invoke the given command with the given frequency
wraprepeat() {
  # Number of seconds to wait between invocations
  interval=$1; shift
  # Format string to use
  format=$1; shift

  # The command to actually execute
  docmd=$@

  last=''

  while true; do
    result=$($docmd)

    if [ "$last" != "$result" ]; then
      printf "$format" "$result"
      last=$result
    fi

    sleep $interval
  done
}

# Error immediately when something bad happens; disallow undefined variables
set -euo pipefail

# Do cleanup before exiting; also exit as soon as an error occurs
# This will let us exit when the X session closes without needing to be killed
trap cleanup INT TERM QUIT EXIT ERR PIPE

. panelopts

# Initialize the fifo, removing it first if it already exists
[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

# Write the pid somewhere so other processes can kill this process
echo $$ > $PANEL_PID_LOC

# Feed various pieces of information into panelupdate
wraprepeat 1 'D%s\n' curdesktop > $PANEL_FIFO &
wraprepeat 2 'C%s\n' clock > $PANEL_FIFO &
wraprepeat 3 'B%s\n' batterypretty > $PANEL_FIFO &

xtitle -sf 'T%s' > $PANEL_FIFO &

# TODO: Add more desktop status info by parsing bspc subscribe
# bspc control --subscribe > "$PANEL_FIFO" &

# Make way for the panel!
bspc config top_padding $PANEL_HEIGHT

./panelout < $PANEL_FIFO | lemonbar -p -f "$PANEL_FONT" &

wait
